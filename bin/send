#!/usr/bin/env python3
# Send argv[1] as binary packet to localhost

import os
import socket
import struct
import sys

# localhost port
PORT = 4000

# get and log message first thing
message = sys.argv[1]
print("message='{}'".format(message))

# setup and connect socket
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.settimeout(10)
sock.connect(("127.0.0.1", PORT))

# encode and send message packet
# prefix is a 32-bit (4-byte) integer signifying total bytes of message
# receiving elixir socket is configured to expect this via: {:packet, 4} option
# for more info see: http://erlang.org/doc/man/gen_tcp.html
packet = bytes(message, "utf-8")
prefix = struct.pack(">I", len(packet))
sock.sendall(prefix + packet)

# try to receive and log response
try:
    # receive and decode 4-byte prefix to get total response length in bytes
    prefix = sock.recv(4)
    resp_bytes = struct.unpack(">I", prefix)[0]
    # receive exact remaining response bytes
    resp = sock.recv(resp_bytes)
    print("response='{}' for message='{}'".format(resp.decode("utf-8"), message))
except socket.timeout:
    print("error=timeout for message='{}'".format(message))
finally:
    sock.shutdown(1)
    sock.close()
